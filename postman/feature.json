{
  "info": {
    "_postman_id": "457ca0af-81d2-4bf1-b258-ce8dfd963477",
    "name": "z Sprint 17 Explore with me (feature_comments)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "2036415"
  },
  "item": [
    {
      "name": "comments",
      "item": [
        {
          "name": "User 1 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
                  "});",
                  "pm.test(\"Has user create response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",

                  "pm.test(\"Test user 'email' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData.email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');",
                  "});",
                  "pm.test(\"Test user 'name' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name, '\"name\" must be \"user\"').to.eql('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"user\",\n    \"email\": \"user@user.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User 2 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
                  "});",
                  "pm.test(\"Has user create response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",

                  "pm.test(\"Test user 'email' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData.email, '\"email\" must be \"user2@user.com\"').to.eql('user2@user.com');",
                  "});",
                  "pm.test(\"Test user 'name' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name, '\"name\" must be \"user2\"').to.eql('user2');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"user2\",\n    \"email\": \"user2@user.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Category 1 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
                  "});",
                  "pm.test(\"Has category create response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",


                  "pm.test(\"Test category 'name' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Comedy\"').to.eql('Comedy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Comedy\"\n }"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Event 1 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
                  "});",
                  "pm.test(\"Has event create response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",

                  "pm.test(\"Test event 'annotation' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('annotation');",
                  "    pm.expect(jsonData.annotation, '\"annotation\" must be \"Сплав на байдарках\"').to.eql('Сплав на байдарках');",
                  "});",
                  "pm.test(\"Test event 'description' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('description');",
                  "    pm.expect(jsonData.description, '\"description\" must be \"На спокойной воде — это парение\"').to.eql('На спокойной воде — это парение');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"annotation\": \"Сплав на байдарках\",\n    \"category\": \"1\",\n    \"description\": \"На спокойной воде — это парение\",\n    \"eventDate\": \"2024-12-31 15:10:05\",\n    \"location\":  { \n \"lat\" : \"55.754167\", \n \"lon\" : \"37.62\"},\n  \"paid\": \"true\",\n  \"participantLimit\": \"10\",\n  \"requestModeration\": \"false\",\n  \"title\": \"Сплав\"\n }"

            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"

                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment 1 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
                  "});",
                  "pm.test(\"Has comment create response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "pm.test(\"Test comment 'id' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
                  "});",
                               "pm.test(\"Test comment 'text' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('text');",
                  "    pm.expect(jsonData.text, '\"text\" must be \"comment_1\"').to.eql('comment_1');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"comment_1\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "users",
                ":userId",
                "events",
                ":eventId"

              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"

                },
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment 2 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
                  "});",
                  "pm.test(\"Has comment create response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "pm.test(\"Test comment 'id' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
                  "});",
                               "pm.test(\"Test comment 'text' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('text');",
                  "    pm.expect(jsonData.text, '\"text\" must be \"comment_2\"').to.eql('comment_2');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"comment_2\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "users",
                ":userId",
                "events",
                ":eventId"

              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "2"

                },
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment 1 patched",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
                  "});",
                  "pm.test(\"Has comment create response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "pm.test(\"Test comment 'id' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
                  "});",
                  "pm.test(\"Test comment 'text' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('text');",
                  "    pm.expect(jsonData.text, '\"text\" must be \"comment_1 patched\"').to.eql('comment_1 patched');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"text\": \"comment_1 patched\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":commentId"

              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "1"

                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment 1 get updated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"Has comment update response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "pm.test(\"Test comment 'id' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
                  "});",
                  "pm.test(\"Test comment 'text' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('text');",
                  "    pm.expect(jsonData.text, '\"text\" must be \"comment_1 patched\"').to.eql('comment_1 patched');",
                  "});",
                  ""

                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment get all",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"Test list comment response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
                  "});",
                  "",
                  "pm.test(\"Test comment[0] 'id' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0]).to.have.property('id');",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
                  "});",
                  "pm.test(\"Test comment[0] 'text' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0]).to.have.property('text');",
                  "    pm.expect(jsonData[0].text, '\"text\" must be \"comment_1 patched\"').to.eql('comment_1 patched');",
                  "});",
                  "",
                  "pm.test(\"Test comment[1] 'id' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[1]).to.have.property('id');",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);",
                  "});",
                  "pm.test(\"Test comment[1] 'text' field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[1]).to.have.property('text');",
                  "    pm.expect(jsonData[1].text, '\"text\" must be \"comment_2\"').to.eql('comment_2');",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment delete by userId 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([204]);",
                  "});",
                   ""

                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/users/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "users",
                ":userId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment delete by eventId 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([204]);",
                  "});",
                   ""

                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Comment get all empty list",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "pm.test(\"Test list user response\", function () {",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ]
            }
          },
          "response": []
        }
      ]
    }

  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}